# spec

## What is it?

`spec` is a [BDD](http://behavior-driven.org)-esque
[nose](http://nose.readthedocs.org) plugin designed to provide "specification"
style test output (similar to Java's
[TestDox](http://agiledox.sourceforge.net/) or Ruby's
[RSpec](https://www.relishapp.com/rspec)). Spec-style output provides a more
structured view of what your tests assert, compared to `nose`/`unittest`'s
default "flat" mode of operation.

For example, this `nose`-style test module:

    class TestShape(object):
        def test_has_sides(self):
            pass

        def test_can_calculate_its_perimeter(self):
            pass

    class TestSquare(object):
        def test_is_a_shape(self):
            pass

        def test_has_four_sides(self):
            pass

        def test_has_sides_of_equal_length(self):
            pass

normally tests like so, in a single flat list:

    TestShape.test_has_sides ... ok
    TestShape.test_can_calculate_its_perimeter ... ok
    TestSquare.test_has_four_sides ... ok
    TestSquare.test_has_sides_of_equal_length ... ok
    TestSquare.test_is_a_shape ... ok

With `spec` enabled (`--with-spec`), the tests are visually grouped by class,
and the member names are tweaked to read more like regular English:

    Shape
    - has sides
    - can calculate its perimeter

    Square
    - has four sides
    - has sides of equal length
    - is a shape


## How do I use it?

Install the plugin via `setup.py`, `pip`, or what have you. Then `nosetests`
will expose these new additional options/flags:

* `--with-spec`: enables the plugin and prints out your tests in specification
  format. Also automatically sets `--verbose` (i.e. the spec output is a
  verbose format.)
* `--no-spec-color`: disables color output. Normally, successes are green,
  failures/errors are red, and
  [skipped](http://nose.readthedocs.org/en/latest/plugins/skip.html) tests are
  yellow.
* `--spec-doctests`: enables (experimental) support for doctests.


## Why would I want to use it?

Specification-style output can make large test suites easier to read, and like any other BDD tool, it's more about framing the way we think about (and view) our tests, and less about introducing new technical methods for writing them.


## Where did it come from?

`spec` is heavily based on the `spec` plugin for Titus Brown's
[pinocchio](http://darcs.idyll.org/~t/projects/pinocchio/doc/#spec-generate-test-description-from-test-class-method-names)
set of Nose extensions. Said plugin was originally written by Michal
Kwiatkowski. Both `pinocchio` and its `spec` plugin are copyright &copy; 2007
in the above two gentlemen's names, respectively.

This version of the plugin was created and distributed by Jeff Forcier, &copy;
2011. It tweaks the original source to be Python 2.7 compatible, based on
[similar](https://github.com/unpluggd/pinocchio/commit/de30d5f7868280a2b9e3545c48e68dd0d9a343a0)
[changes](https://github.com/bitprophet/rudolf/commit/7c872e7deeff622de62a439b8e4dd807047c095e).
It also fixes a handful of bugs such as broken
[SkipTest](http://nose.readthedocs.org/en/latest/plugins/skip.html)
compatibility under Nose 1.x.


## What's the license?

Because this is heavily derivative of `pinocchio`, `spec` is licensed the same
way -- under the [MIT
license](http://www.opensource.org/licenses/mit-license.php).
